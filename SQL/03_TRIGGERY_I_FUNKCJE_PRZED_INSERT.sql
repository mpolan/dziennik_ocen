-- ===================================
--               FUNKCJE
-- ===================================

-- Funkcja haszująca hasło
CREATE OR REPLACE FUNCTION HASHUJ_HASLO(P_HASLO VARCHAR2) RETURN VARCHAR2 IS
  V_HASH RAW(32);
BEGIN
  V_HASH := DBMS_CRYPTO.HASH(UTL_I18N.STRING_TO_RAW(P_HASLO, 'AL32UTF8'), DBMS_CRYPTO.HASH_SH256);
  RETURN RAWTOHEX(V_HASH);
END;
/

-- ========================
--        SEKWENCJE
-- ========================
-- Sekwencja dla LOG_ZMIAN
CREATE SEQUENCE LOG_ZMIAN_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-- Sekwencja dla HISTORIA_OCEN
CREATE SEQUENCE HISTORIA_OCEN_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-- Sekwencja dla ZALICZENIE
CREATE SEQUENCE ZALICZENIE_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-- ==========================================
-- PROCEDURA LOGUJĄCA ZMIANY W TABELACH
-- ==========================================
CREATE OR REPLACE PROCEDURE ZALOGUJ_ZMIANE (
  p_email      IN VARCHAR2,
  p_tabela     IN VARCHAR2,
  p_akcja      IN VARCHAR2,
  p_rekord_id  IN NUMBER
) IS
  v_user_id NUMBER;
BEGIN
  IF p_email IS NOT NULL THEN
    BEGIN
      SELECT id INTO v_user_id FROM uzytkownik WHERE login = p_email;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        v_user_id := NULL; -- nie znaleziono – ignoruj
    END;
  ELSE
    v_user_id := NULL; -- brak emaila – np. wywołanie z triggera
  END IF;

  INSERT INTO LOG_ZMIAN (ID, UZYTKOWNIK_ID, AKCJA, TABELA, REKORD_ID, DATA)
  VALUES (
    LOG_ZMIAN_SEQ.NEXTVAL,
    v_user_id,
    p_akcja,
    p_tabela,
    p_rekord_id,
    SYSTIMESTAMP
  );
END;
/
-- ==========================================
--        TRIGGERY DO UZYTKOWNIKOW
-- ==========================================

-- Triggery do tworzenia użytkowników przy INSERT
CREATE OR REPLACE TRIGGER TRG_UTWORZ_UZYTKOWNIKA_STUDENT
AFTER INSERT ON STUDENT
FOR EACH ROW
DECLARE
    V_NEW_ID NUMBER;
    V_HASLO VARCHAR2(10);
BEGIN
    SELECT NVL(MAX(ID), 0) + 1 INTO V_NEW_ID FROM UZYTKOWNIK;
     -- Budowa hasła: pierwsza litera imienia + nazwiska + ID
    V_HASLO := SUBSTR(:NEW.IMIE, 1, 1) || SUBSTR(:NEW.NAZWISKO, 1, 1) || TO_CHAR(:NEW.ID);
    
    INSERT INTO UZYTKOWNIK (ID, LOGIN, HASLO, ROLA)
    VALUES (
        V_NEW_ID,
        :NEW.EMAIL,
        HASHUJ_HASLO(V_HASLO),
        'STUDENT'
    );
END;
/

CREATE OR REPLACE TRIGGER TRG_UTWORZ_UZYTKOWNIKA_NAUCZYCIEL
AFTER INSERT ON NAUCZYCIEL
FOR EACH ROW
DECLARE
    V_NEW_ID NUMBER;
    V_HASLO VARCHAR2(10);
BEGIN
    SELECT NVL(MAX(ID), 0) + 1 INTO V_NEW_ID FROM UZYTKOWNIK;
     -- Budowa hasła: pierwsza litera imienia + nazwiska + ID
    V_HASLO := SUBSTR(:NEW.IMIE, 1, 1) || SUBSTR(:NEW.NAZWISKO, 1, 1) || TO_CHAR(:NEW.ID);
    INSERT INTO UZYTKOWNIK (ID, LOGIN, HASLO, ROLA)
    VALUES (
        V_NEW_ID,
        :NEW.EMAIL,
        HASHUJ_HASLO(V_HASLO),
        'NAUCZYCIEL'
    );
END;
/

-- ==========================================
--      TRIGGERY LOGUJĄCE ZMIANY
-- ==========================================

-- OCENA
--CREATE OR REPLACE TRIGGER trg_log_ocena
--AFTER INSERT OR UPDATE OR DELETE ON OCENA
--FOR EACH ROW
--BEGIN
--  IF INSERTING THEN
--    ZALOGUJ_ZMIANE('OCENA', 'INSERT', :NEW.ID);
--  ELSIF UPDATING THEN
--    ZALOGUJ_ZMIANE('OCENA', 'UPDATE', :NEW.ID);
--  ELSIF DELETING THEN
--    ZALOGUJ_ZMIANE('OCENA', 'DELETE', :OLD.ID);
--  END IF;
--END;
--/

-- STUDENT
CREATE OR REPLACE TRIGGER trg_log_student
AFTER INSERT OR UPDATE OR DELETE ON STUDENT
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    ZALOGUJ_ZMIANE(NULL, 'STUDENT', 'INSERT', :NEW.ID);
  ELSIF UPDATING THEN
    ZALOGUJ_ZMIANE(NULL, 'STUDENT', 'UPDATE', :NEW.ID);
  ELSIF DELETING THEN
    ZALOGUJ_ZMIANE(NULL, 'STUDENT', 'DELETE', :OLD.ID);
  END IF;
END;
/

-- NAUCZYCIEL
CREATE OR REPLACE TRIGGER trg_log_nauczyciel
AFTER INSERT OR UPDATE OR DELETE ON NAUCZYCIEL
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    ZALOGUJ_ZMIANE(NULL, 'NAUCZYCIEL', 'INSERT', :NEW.ID);
  ELSIF UPDATING THEN
    ZALOGUJ_ZMIANE(NULL, 'NAUCZYCIEL', 'UPDATE', :NEW.ID);
  ELSIF DELETING THEN
    ZALOGUJ_ZMIANE(NULL, 'NAUCZYCIEL', 'DELETE', :OLD.ID);
  END IF;
END;
/

-- ZAPISY
CREATE OR REPLACE TRIGGER trg_log_zapisy
AFTER INSERT OR UPDATE OR DELETE ON ZAPISY
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    ZALOGUJ_ZMIANE(NULL, 'ZAPISY', 'INSERT', :NEW.ID);
  ELSIF UPDATING THEN
    ZALOGUJ_ZMIANE(NULL, 'ZAPISY', 'UPDATE', :NEW.ID);
  ELSIF DELETING THEN
    ZALOGUJ_ZMIANE(NULL, 'ZAPISY', 'DELETE', :OLD.ID);
  END IF;
END;
/

-- PRZEDMIOT
CREATE OR REPLACE TRIGGER trg_log_przedmiot
AFTER INSERT OR UPDATE OR DELETE ON PRZEDMIOT
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    ZALOGUJ_ZMIANE(NULL, 'PRZEDMIOT', 'INSERT', :NEW.ID);
  ELSIF UPDATING THEN
    ZALOGUJ_ZMIANE(NULL, 'PRZEDMIOT', 'UPDATE', :NEW.ID);
  ELSIF DELETING THEN
    ZALOGUJ_ZMIANE(NULL, 'PRZEDMIOT', 'DELETE', :OLD.ID);
  END IF;
END;
/

-- GRUPA
CREATE OR REPLACE TRIGGER trg_log_grupa
AFTER INSERT OR UPDATE OR DELETE ON GRUPA
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    ZALOGUJ_ZMIANE(NULL, 'GRUPA', 'INSERT', :NEW.ID);
  ELSIF UPDATING THEN
    ZALOGUJ_ZMIANE(NULL, 'GRUPA', 'UPDATE', :NEW.ID);
  ELSIF DELETING THEN
    ZALOGUJ_ZMIANE(NULL, 'GRUPA', 'DELETE', :OLD.ID);
  END IF;
END;
/
